## CSE 331 hw-graph Part 2 Questions

NOTE: This file is used as part of hw-graph-part2, and is not due as part of the hw-graph-part1
submission. You may leave it blank for hw-graph-part1.

## Section 1
###########################################################################

A few examples of possible Graph representations:

    A: A collection of edges.
    B: An adjacency list, in which each node is associated with a list of its outgoing edges.
    C: An adjacency matrix, which explicitly represents, for every pair ⟨A,B⟩ of edges, whether there is a link from A to B, and how many.

1. In two or three sentences, explain an advantage and a disadvantage of each of the
representations listed above (for example, in terms of runtime complexity, space
complexity, or ease of implementation).
    A: The slowest representation, it uses linear search to search every single edge.
       But easy to add new edge and implement.
    B: Hard to get/know the incoming/parent node.
       Easy and fast to find the outgoing edge, doesn't waste memory space.
    C: Difficult to implement, and use/waste more memory space.
       Very fast edge lookup.


2. In two to three sentences, describe the representation you chose and explain why you
chose it. If you chose to use a different representation than one of the three we described
above, be sure to list its advantages and disadvantages, too.
    I chose representation B. I'm using a HashMap, so i use the node as HashMap key and
    store its outgoing edges in a HashSet as the HashMap value. I use map and set
    because there doesn't duplicate nodes or edges.
    I chose this representation because it has a relatively good runtime complexity and easy to complement.



## Section 4
###########################################################################

    (Please keep your answers brief and to-the-point.)

1. Describe any new tests you added and why you added them, or why you feel that your original
tests alone are sufficient.
    I added some script tests to test throw Exceptions because I didn't test them in part 1.
    I also added more Junit test to make it more details.

2. Did you make any changes to your specifications as you were implementing your Graph? (yes/no)
If yes, describe your changes and why you made them.
    Yes, I changed the return type of ListNode and ListEdge, now they are retuning Set<Node>/Set<Edge>, not String.
    By changing this, the client will get more flexibility.


